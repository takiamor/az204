azure fonction:
 * azure serverless:
	- servelesse architecture generally describes fully managed cloud services.
	- a servelesse service could have all or most characteristics :
	   	+ highly elastic and scalable
		+ highly available 
		+ highly durable 
		+ secure by default  
	- abstracts away the underlying infra
	- billed based on the execution of your business task
	- can Scale-to-zero meaning when not in use servelesse (cost nothing ).
	- some services are more serveless than others (energy rating).
 * Function as a service (Faas)!
	- Allows developersto focus on just writing pieces of code (functions).
	- has event-driven integration trigger functions based on event data or to emit enevt data.
	- muktiple function are orchestrated to create a serveless app.
	- (Faas)is not serveless is not serverless on its own.
	- Faas is only serverless if its fully-managed and scales to zero.
* Azure function: 
	- is a (Faas) offering to developers to focus on writing code.
	- not worry about maintaning the underlying computing infra.
	- trigger : is the chosen event data that will cause function to exec (can have 1 trigger).
	- function app :
		+ def the underlying compute for a coolection of func.
		+ def the hosting,Runtime and other global config.
	- input Bindings : one or multiple data sources , will passed to func when trigger occurs.
	- Function : code along with application runtime config.
 	- output bindings : one or more date sinks ,receive outputted date from the func on secccessful execution.
* Storage Considerations : 
	- Func app requires a storage account to operate.
	- if account deleted , your func won't work.
	- Azure Func uses storege types : 
		+ Blob Storage
		+ azure Files
		+ Queue Storage
		+ Table Storage
* Anatomy of a function :
	- function.json : config of a single func defining bindings.
	- code :  code of your func 
	- .funcignore : files to ignore
	- host.json : global config of all func at the func app level
	- local Project : a place to locally store code
* Authorization level : 
	- need to be present on request in order to invoke the function 
	- can be one of this values:
		+ anonymous_No api key required.
		+ function_a func-specific API is required
		+ admin_the master key is required
	- can usually be changed after creation in the portal,and set on the trigger

* Functions Debugging :
	- you can enable streaming logs for azure functions to see near real time logging when an error occurs.
	- two ways to view a stream of log being generated by your func executions:
		+ built-in log streaming :
			- App service platform ltes you view a tream of your app log files.
		+ live metrics stream :
			- func app is connected to app Insights:
				- view log data 
				- and ather metrics in near real-time in azure portal using live metrcs stram.
* Key Concepts :
	- are lightweight and (canbe) serveless.
	- easier to write and deploy.
	- fast to execute 
	- execution is triggered when an event is fired.
	- do not need any infra and have zero maintenance.
	- can be built,test,and deployed 
	- easy to update and doesn't affect other partes of the website.
	- use industry standar protocols and can communicate with other api's,databases,lib.
	- only pay while your func are run.
	- automatic scale to meet the demand of traffic.
	- underneath azure will provision more serverless containers.
	- can scale-to-zero cost
	- has built in monitoring via azure monitor.
	- built ci/cd via aure devops.
	- are event-driven,and will trigger based on event data,emit event data.
* use cases :
	- Business Use-Cases :
		+ scheuled tasks 
		+ reminders and notifications
		+ lightweight web API
		+ sending background emails
		+ runing background backup tasks 
		+ doing backend calcul
	- Technical :
		+ send email
		+ starting backup
		+ order prosseing
		+ task scheduling 
		     - database ckeanup
		     - send notifications
		     - messages
		     - Iot data processing
* Runtime :
	- is compute env config with the neczssary software and systeme config  to run a specific type of app code.
	- azure provides multiple app runtimes for popular programing languages (runtime stack).

